{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","style","background","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","Fragment","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","color","client","ApolloClient","uri","App","width","margin","exact","path","component","React","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.aee79893.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst LaunchItem = ({launch: {flight_number, mission_name, launch_date_local, launch_success}}) => {\r\n  return (\r\n    <div className=\"cards card-body mb-3\" style={{background:\"#333\"}}>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-9\">\r\n          <h4>Mission: <span className={classNames({\r\n            'text-success': launch_success,\r\n            'text-danger': !launch_success\r\n          })}>{mission_name}</span></h4>\r\n          <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LaunchItem;","import React from 'react';\r\n\r\nexport default function MissionKey() {\r\n  return (\r\n    <div className=\"my-3\">\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-success\"/> = Success\r\n      </p>\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-danger\"/> = Fail\r\n      </p>\r\n    </div>\r\n  )\r\n}","import React, { Component } from 'react';\r\nimport gql from 'graphql-tag'; //makes the queries\r\nimport {Query} from 'react-apollo';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LaunchesQuery {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nexport class Launches extends Component {\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n        <h1 className=\"display-4 my-3\">Launches</h1>\r\n        <MissionKey />\r\n        <Query query={LAUNCHES_QUERY}>\r\n            {\r\n              ({ loading, error, data}) => {\r\n                if(loading) return <h4>Loading</h4>\r\n                if(error) console.log(error);\r\n                \r\n                return <React.Fragment>\r\n                  {\r\n                    data.launches.map(launch => {\r\n                      return <LaunchItem \r\n                        key={launch.flight_number} \r\n                        launch={launch} />\r\n                    })\r\n                  }                \r\n                </React.Fragment>\r\n              }\r\n            }\r\n        </Query>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Launches;","import React, { Component } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport { Link } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_success\r\n      launch_date_local\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass Launch extends Component {\r\n  render() {\r\n    let { flight_number } = this.props.match.params;\r\n    flight_number = parseInt(flight_number);\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Launch</h1>\r\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <h4>Loading</h4>;\r\n            if (error) console.log(error);\r\n\r\n            const {\r\n              mission_name,\r\n              flight_number,\r\n              launch_year,\r\n              launch_success,\r\n              rocket: { rocket_id, rocket_name, rocket_type }\r\n            } = data.launch;\r\n            return (\r\n              <div>\r\n                <h1 className=\"display-4 my-3\">\r\n                  Mission:{\" \"}\r\n                  <span style={{color: \"#555\"}}>{mission_name}</span>\r\n                </h1>\r\n                <h4 className=\"mb-3\">Launch Details</h4>\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n                  <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n                  <li className=\"list-group-item\">Flight Success: <span className={classNames({\r\n                    'text-success': launch_success,\r\n                    'text-danger': !launch_success\r\n                  })}>{launch_success?\"Yes\": \"No\"}</span></li>\r\n                </ul>\r\n                <h4 className=\"my-3\">Rocket Details</h4>\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                  <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n                  <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n                </ul>\r\n                <hr/>\r\n                <Link className=\"btn btn-secondary\" to=\"/\">Back</Link>\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Launch;\r\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\n\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\nclass App extends React.Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <h1 style={{width: \"300px\",margin:\"auto\"}}>Spacex</h1>\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}